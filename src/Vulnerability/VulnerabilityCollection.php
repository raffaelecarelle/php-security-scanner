<?php

namespace Security\CodeAnalyzer\Vulnerability;

/**
 * Collection class for vulnerabilities.
 * Implements \Countable and \Iterator interfaces for easy iteration and counting.
 */
class VulnerabilityCollection implements \Countable, \Iterator
{
    /**
     * @var VulnerabilityInterface[]
     */
    private array $vulnerabilities = [];

    /**
     * @var int Current position for Iterator
     */
    private int $position = 0;

    /**
     * Add a vulnerability to the collection.
     *
     * @param VulnerabilityInterface $vulnerability
     * @return self
     */
    public function add(VulnerabilityInterface $vulnerability): self
    {
        $this->vulnerabilities[] = $vulnerability;
        return $this;
    }

    /**
     * Merge another vulnerability collection into this one.
     *
     * @param VulnerabilityCollection $collection
     * @return self
     */
    public function merge(VulnerabilityCollection $collection): self
    {
        foreach ($collection as $vulnerability) {
            $this->add($vulnerability);
        }
        return $this;
    }

    /**
     * Get all vulnerabilities.
     *
     * @return VulnerabilityInterface[]
     */
    public function getAll(): array
    {
        return $this->vulnerabilities;
    }

    /**
     * Filter vulnerabilities by severity.
     *
     * @param string $severity
     * @return VulnerabilityCollection
     */
    public function filterBySeverity(string $severity): VulnerabilityCollection
    {
        $filtered = new self();
        foreach ($this->vulnerabilities as $vulnerability) {
            if ($vulnerability->getSeverity() === $severity) {
                $filtered->add($vulnerability);
            }
        }
        return $filtered;
    }

    /**
     * Count the number of vulnerabilities.
     *
     * @return int
     */
    public function count(): int
    {
        return count($this->vulnerabilities);
    }

    /**
     * Return the current vulnerability.
     *
     * @return VulnerabilityInterface
     */
    public function current(): VulnerabilityInterface
    {
        return $this->vulnerabilities[$this->position];
    }

    /**
     * Return the key of the current vulnerability.
     *
     * @return int
     */
    public function key(): int
    {
        return $this->position;
    }

    /**
     * Move forward to next vulnerability.
     *
     * @return void
     */
    public function next(): void
    {
        ++$this->position;
    }

    /**
     * Rewind the Iterator to the first vulnerability.
     *
     * @return void
     */
    public function rewind(): void
    {
        $this->position = 0;
    }

    /**
     * Check if current position is valid.
     *
     * @return bool
     */
    public function valid(): bool
    {
        return isset($this->vulnerabilities[$this->position]);
    }
}
