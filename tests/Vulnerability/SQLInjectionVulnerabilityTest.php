<?php

namespace Security\CodeAnalyzer\Tests\Vulnerability;

use PHPUnit\Framework\TestCase;
use Security\CodeAnalyzer\Vulnerability\SQLInjectionVulnerability;

class SQLInjectionVulnerabilityTest extends TestCase
{
    public function testGetType(): void
    {
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        
        $this->assertEquals('SQL Injection', $vulnerability->getType());
    }
    
    public function testGetDescription(): void
    {
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        
        $this->assertStringContainsString('SQL Injection vulnerability detected', $vulnerability->getDescription());
    }
    
    public function testGetSuggestion(): void
    {
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        
        $this->assertStringContainsString('Use prepared statements', $vulnerability->getSuggestion());
    }
    
    public function testGetFilePath(): void
    {
        $filePath = '/path/to/file.php';
        $vulnerability = new SQLInjectionVulnerability(
            $filePath,
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        
        $this->assertEquals($filePath, $vulnerability->getFilePath());
    }
    
    public function testGetLineNumber(): void
    {
        $lineNumber = 10;
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            $lineNumber,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        
        $this->assertEquals($lineNumber, $vulnerability->getLineNumber());
    }
    
    public function testGetCodeSnippet(): void
    {
        $codeSnippet = '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";';
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            $codeSnippet,
            'high'
        );
        
        $this->assertEquals($codeSnippet, $vulnerability->getCodeSnippet());
    }
    
    public function testGetSeverity(): void
    {
        $severity = 'high';
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            $severity
        );
        
        $this->assertEquals($severity, $vulnerability->getSeverity());
    }
}