<?php

namespace Security\CodeAnalyzer\Tests\Vulnerability;

use PHPUnit\Framework\TestCase;
use Security\CodeAnalyzer\Vulnerability\SQLInjectionVulnerability;
use Security\CodeAnalyzer\Vulnerability\VulnerabilityCollection;
use Security\CodeAnalyzer\Vulnerability\XSSVulnerability;

class VulnerabilityCollectionTest extends TestCase
{
    public function testAdd(): void
    {
        $collection = new VulnerabilityCollection();
        $vulnerability = new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        
        $collection->add($vulnerability);
        
        $this->assertCount(1, $collection);
        $this->assertSame($vulnerability, $collection->getAll()[0]);
    }
    
    public function testMerge(): void
    {
        $collection1 = new VulnerabilityCollection();
        $collection1->add(new SQLInjectionVulnerability(
            '/path/to/file1.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        ));
        
        $collection2 = new VulnerabilityCollection();
        $collection2->add(new XSSVulnerability(
            '/path/to/file2.php',
            20,
            'echo $userInput;',
            'medium'
        ));
        
        $collection1->merge($collection2);
        
        $this->assertCount(2, $collection1);
        $this->assertEquals('SQL Injection', $collection1->getAll()[0]->getType());
        $this->assertEquals('Cross-Site Scripting (XSS)', $collection1->getAll()[1]->getType());
    }
    
    public function testGetAll(): void
    {
        $collection = new VulnerabilityCollection();
        $vulnerability1 = new SQLInjectionVulnerability(
            '/path/to/file1.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        $vulnerability2 = new XSSVulnerability(
            '/path/to/file2.php',
            20,
            'echo $userInput;',
            'medium'
        );
        
        $collection->add($vulnerability1);
        $collection->add($vulnerability2);
        
        $all = $collection->getAll();
        $this->assertCount(2, $all);
        $this->assertSame($vulnerability1, $all[0]);
        $this->assertSame($vulnerability2, $all[1]);
    }
    
    public function testFilterBySeverity(): void
    {
        $collection = new VulnerabilityCollection();
        $collection->add(new SQLInjectionVulnerability(
            '/path/to/file1.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        ));
        $collection->add(new XSSVulnerability(
            '/path/to/file2.php',
            20,
            'echo $userInput;',
            'medium'
        ));
        
        $highSeverity = $collection->filterBySeverity('high');
        $this->assertCount(1, $highSeverity);
        $this->assertEquals('high', $highSeverity->getAll()[0]->getSeverity());
        
        $mediumSeverity = $collection->filterBySeverity('medium');
        $this->assertCount(1, $mediumSeverity);
        $this->assertEquals('medium', $mediumSeverity->getAll()[0]->getSeverity());
        
        $lowSeverity = $collection->filterBySeverity('low');
        $this->assertCount(0, $lowSeverity);
    }
    
    public function testIteration(): void
    {
        $collection = new VulnerabilityCollection();
        $vulnerability1 = new SQLInjectionVulnerability(
            '/path/to/file1.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        );
        $vulnerability2 = new XSSVulnerability(
            '/path/to/file2.php',
            20,
            'echo $userInput;',
            'medium'
        );
        
        $collection->add($vulnerability1);
        $collection->add($vulnerability2);
        
        $count = 0;
        $types = [];
        
        foreach ($collection as $vulnerability) {
            $count++;
            $types[] = $vulnerability->getType();
        }
        
        $this->assertEquals(2, $count);
        $this->assertEquals(['SQL Injection', 'Cross-Site Scripting (XSS)'], $types);
    }
    
    public function testCount(): void
    {
        $collection = new VulnerabilityCollection();
        $this->assertCount(0, $collection);
        
        $collection->add(new SQLInjectionVulnerability(
            '/path/to/file.php',
            10,
            '$query = "SELECT * FROM users WHERE username = \'" . $username . "\'";',
            'high'
        ));
        $this->assertCount(1, $collection);
        
        $collection->add(new XSSVulnerability(
            '/path/to/file.php',
            20,
            'echo $userInput;',
            'medium'
        ));
        $this->assertCount(2, $collection);
    }
}